
#
# Image content settings.
#
tt_content.image.20 {

	1 {

		# Append bootstrap style classes.
		params.append = COA
		params.append {

			10 = TEXT
			10.value = img-responsive
			10.if.isTrue.field = tx_adxtwitterbootstrap_image_responsive

			# Add image style.
			20 = TEXT
			20 {

				field = tx_adxtwitterbootstrap_image_style
				required = 1

				# Thumbnail will be set by addClassesImage.
				if.value = img-thumbnail
				if.equals.field = tx_adxtwitterbootstrap_image_style
				if.negate = 1

				noTrimWrap = | ||
			}

			stdWrap.required = 1
			stdWrap.trim = 1
			stdWrap.noTrimWrap = | class="|"|
		}
	}

	# If image width is set and greater than the maximal width, than use no width limitation. Usefull for feature images.
	maxW.override >
	maxW.override {
		field = imagewidth
		if.value = {$styles.content.imgtext.maxW}
		if.isGreaterThan.field = imagewidth
	}

	# Muiltiply colSpace by 2.
	colSpace.stdWrap.wrap = | * 2
	colSpace.prioriCalc = 1

	# Add thumbnail class.
	addClassesImage.override = csc-textpic-first thumbnail |*| thumbnail |*| csc-textpic-last thumbnail
	addClassesImage.override.if.value = img-thumbnail
	addClassesImage.override.if.equals.field = tx_adxtwitterbootstrap_image_style

	layout {
		# intext-right
		17.value = <div class="csc-textpic csc-textpic-intext-right row###CLASSES###">###IMAGES###<div class="clearfix visible-xs"></div>###TEXT###</div>
		# intext-left
		18.value = <div class="csc-textpic csc-textpic-intext-left row###CLASSES###">###IMAGES###<div class="clearfix visible-xs"></div>###TEXT###</div>
		# intext-right-nowrap
		25.value = <div class="csc-textpic csc-textpic-intext-right-nowrap row###CLASSES###">###IMAGES###<div class="clearfix visible-xs"></div>###TEXT###</div>
		# intext-left-nowrap
		26.value = <div class="csc-textpic csc-textpic-intext-left-nowrap row###CLASSES###">###IMAGES###<div class="clearfix visible-xs"></div>###TEXT###</div>
	}

	# Only HTML5 rendering.
	rendering >
	rendering {
		# Single image - No caption
		singleNoCaption {
			# Choose another rendering for special edge cases
			fallbackRendering = COA
			fallbackRendering {
				# Single image - Caption
				10 = TEXT
				10 {
					if {
						isTrue.field = imagecaption
						value = 1
						equals.data = register:imageCount
					}
					value = singleCaption
				}

				# Multiple images and split caption
				20 = TEXT
				20 {
					if {
						value = 1
						isGreaterThan.data = register:imageCount
						isTrue.if.isFalse.data = register:renderGlobalCaption
						isTrue.field = imagecaption
					}
					value = splitCaption
				}

				# Multiple images and one global caption
				30 = TEXT
				30 {
					if {
						value = 1
						isGreaterThan.data = register:imageCount
						isTrue.if.isTrue.data = register:renderGlobalCaption
						isTrue.field = imagecaption
					}
					value = globalCaption
				}

				# Multiple images and no caption at all
				40 = TEXT
				40 {
					if {
						value = 1
						isGreaterThan.data = register:imageCount
						isFalse.field = imagecaption
					}
					value = noCaption
				}
			}
			allStdWrap {
				wrap = <div class="csc-textpic-imagewrap"> | </div>
				innerWrap.cObject = CASE
				innerWrap.cObject {
					key.field = imageorient
					# above-center
					0 = TEXT
					0.value = <div class="csc-textpic-center-outer"><div class="csc-textpic-center-inner"> | </div></div>
					# below-center
					8 < .0
				}
			}
			imgTagStdWrap.wrap = |
			imgTagStdWrap.append = LOAD_REGISTER
			imgTagStdWrap.append.maxImageWidth {
				data = TSFE:lastImageInfo|0
				override = {TSFE:lastImageInfo|0} + {$styles.content.imgtext.borderThick} * 2
				override.stdWrap.insertData = 1
				override.if.isTrue.field = imageborder
				override.prioriCalc = 1
			}


			singleStdWrap.wrap = <figure class="csc-textpic-image###CLASSES###" style="max-width: {register: maxImageWidth}px;"> @ </figure>
			singleStdWrap.wrap.splitChar = @
			singleStdWrap.insertData = 1
			rowStdWrap.wrap = |
			noRowsStdWrap.wrap = |
			lastRowStdWrap.wrap = |
			columnStdWrap.wrap = |
			imgTagStdWrap.wrap = |
			editIconsStdWrap.wrap = <div> | </div>
			caption.wrap = |
		}
		noCaption {
			# Multiple images and no caption at all
			fallbackRendering < tt_content.image.20.rendering.singleNoCaption.fallbackRendering.10
			allStdWrap.wrap = <div class="csc-textpic-imagewrap"> | </div>
			singleStdWrap.wrap = <figure class="csc-textpic-image###CLASSES###" style="max-width: {register: maxImageWidth}px;"> @ </figure>
			rowStdWrap.wrap = <div class="csc-textpic-imagerow row"> | </div>
			rowStdWrap.insertData = 1
			noRowsStdWrap.wrap = <div class="csc-textpic-imagerow csc-textpic-imagerow-none row"> | </div>
			noRowsStdWrap.insertData = 1
			lastRowStdWrap.wrap = <div class="csc-textpic-imagerow csc-textpic-imagerow-last row"> | </div>
			lastRowStdWrap.insertData = 1
			columnStdWrap.wrap = <div class="csc-textpic-imagecolumn###CLASSES###"> | </div>
		}
		singleCaption {
			# Just one image with a caption
			fallbackRendering < tt_content.image.20.rendering.singleNoCaption.fallbackRendering.10
			singleStdWrap.wrap = <figure class="csc-textpic-image###CLASSES###" style="max-width: {register: maxImageWidth}px;"> @ ###CAPTION###</figure>
			caption {
				required = 1
				wrap = <figcaption class="csc-textpic-caption###CLASSES###"> | </figcaption>
			}
		}
		splitCaption {
			fallbackRendering < tt_content.image.20.rendering.singleNoCaption.fallbackRendering.10
			singleStdWrap.wrap = <figure class="csc-textpic-image###CLASSES###" style="max-width: {register: maxImageWidth}px;"> @ ###CAPTION###</figure>
			rowStdWrap.wrap = <div class="csc-textpic-imagerow row"> | </div>
			rowStdWrap.insertData = 1
			noRowsStdWrap.wrap = <div class="csc-textpic-imagerow csc-textpic-imagerow-none row"> | </div>
			lastRowStdWrap.wrap = <div class="csc-textpic-imagerow csc-textpic-imagerow-last row"> | </div>
			lastRowStdWrap.insertData = 1
			columnStdWrap.wrap = <div class="csc-textpic-imagecolumn###CLASSES###"> | </div>
			caption {
				required = 1
				wrap = <figcaption class="csc-textpic-caption###CLASSES###"> | </figcaption>
			}
		}
		globalCaption {
			# Just one image without a caption
			fallbackRendering < tt_content.image.20.rendering.singleNoCaption.fallbackRendering.10
			allStdWrap.wrap = <figure class="csc-textpic-imagewrap" style="max-width: {register: maxImageWidth}px;"> @ ###CAPTION###</figure>
			allStdWrap.wrap.splitChar = @
			allStdWrap.insertData = 1
			singleStdWrap.wrap = <div class="csc-textpic-image###CLASSES###"> @ </div>
			rowStdWrap.wrap = <div class="csc-textpic-imagerow row"> | </div>
			noRowsStdWrap.wrap = <div class="csc-textpic-imagerow csc-textpic-imagerow-none row"> | </div>
			noRowsStdWrap.insertData = 1
			lastRowStdWrap.wrap = <div class="csc-textpic-imagerow csc-textpic-imagerow-last row"> | </div>
			lastRowStdWrap.insertData = 1
			columnStdWrap.wrap = <div class="csc-textpic-imagecolumn###CLASSES###"> | </div>
			caption {
				required = 1
				wrap = <figcaption class="csc-textpic-caption###CLASSES###"> | </figcaption>
			}
		}
	}
}






# Fix inline column space.
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(div.csc-textpic .csc-textpic-imagewrap .csc-textpic-image { font-size: 0; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(div.csc-textpic .csc-textpic-imagewrap .csc-textpic-caption { font-size: 1rem; });

# IE8 fix for responsive image class.
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(.img-responsive { width: auto; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(div.csc-textpic .csc-textpic-imagewrap .csc-textpic-image { display: inline-block; width: 100%; });

# Remove image border pre defenitions.
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := removeString(div.csc-textpic .csc-textpic-imagewrap img { border: none; display: block; });

# Captions.
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := removeString(figcaption.csc-textpic-caption { display: table-caption; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := replaceString(.csc-textpic-caption { text-align: left; caption-side: bottom; }|.csc-textpic-caption { text-align: left; });

# Remove floating columns.
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := replaceString(div.csc-textpic div.csc-textpic-imagecolumn { float: left; }|div.csc-textpic div.csc-textpic-imagecolumn { display: inline-block; max-width: 100%; vertical-align: top; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(div.csc-textpic .csc-textpic-imagewrap .csc-textpic-imagecolumn .csc-textpic-image { display: block; });
# Remove redundant figure table definition.
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := removeString(div.csc-textpic .csc-textpic-imagewrap figure, div.csc-textpic figure.csc-textpic-imagewrap { margin: 0; display: table; });

# Center (above or below)
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := removeString(div.csc-textpic-center .csc-textpic-center-outer { position: relative; float: right; right: 50%; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := replaceString(div.csc-textpic-center .csc-textpic-center-inner { position: relative; float: right; right: -50%; }|div.csc-textpic-center .csc-textpic-center-inner { text-align: center; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := removeString(div.csc-textpic-center .csc-textpic-imagewrap, div.csc-textpic-center figure.csc-textpic-imagewrap { overflow: hidden; });

# Right (above or below)
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(div.csc-textpic-right { text-align: right; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := replaceString(div.csc-textpic-right .csc-textpic-imagewrap { float: right; }|div.csc-textpic-right .csc-textpic-imagewrap { display: inline-block; max-width: 100%; });

# Left (above or below)
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(div.csc-textpic-left { text-align: left; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := replaceString(div.csc-textpic-left .csc-textpic-imagewrap { float: left; }|div.csc-textpic-right .csc-textpic-imagewrap { display: inline-block; max-width: 100%; });

# Right (in text)
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := replaceString(div.csc-textpic-intext-right .csc-textpic-imagewrap { float: right; }|div.csc-textpic-intext-right .csc-textpic-imagewrap { float: right; max-width: 100%; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(div.csc-textpic-intext-right .csc-textpic-text, div.csc-textpic-intext-right .csc-textpic-imagewrap { padding-right: {$styles.content.imgtext.colSpace}px; padding-left: {$styles.content.imgtext.colSpace}px; } div.csc-textpic-intext-right .csc-textpic-imagewrap { margin-left: {$styles.content.imgtext.colSpace}px;});

# Left (in text)
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := replaceString(div.csc-textpic-intext-left .csc-textpic-imagewrap { float: left; }|div.csc-textpic-intext-left .csc-textpic-imagewrap { float: left; max-width: 100%; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(div.csc-textpic-intext-left .csc-textpic-text, div.csc-textpic-intext-left .csc-textpic-imagewrap { padding-right: {$styles.content.imgtext.colSpace}px; padding-left: {$styles.content.imgtext.colSpace}px; } div.csc-textpic-intext-left .csc-textpic-imagewrap { margin-right: {$styles.content.imgtext.colSpace}px;});

# Right (in text, no wrap around)
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := replaceString(div.csc-textpic-intext-right-nowrap .csc-textpic-imagewrap { float: right; }|div.csc-textpic-intext-right-nowrap .csc-textpic-imagewrap { float: right; max-width: 100%; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(.csc-textpic-intext-right-nowrap .csc-textpic-text { margin-right: 0 !important; } div.csc-textpic-intext-right-nowrap .csc-textpic-text, div.csc-textpic-intext-right-nowrap .csc-textpic-imagewrap { padding-right: {$styles.content.imgtext.colSpace}px; padding-left: {$styles.content.imgtext.colSpace}px; } div.csc-textpic-intext-right-nowrap .csc-textpic-text { overflow: hidden; });

# Left (in text, no wrap around)
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := replaceString(div.csc-textpic-intext-left-nowrap .csc-textpic-imagewrap { float: left; }|div.csc-textpic-intext-left-nowrap .csc-textpic-imagewrap { float: left; max-width: 100%; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(.csc-textpic-intext-left-nowrap .csc-textpic-text { margin-left: 0 !important; } div.csc-textpic-intext-left-nowrap .csc-textpic-text, div.csc-textpic-intext-left-nowrap .csc-textpic-imagewrap { padding-right: {$styles.content.imgtext.colSpace}px; padding-left: {$styles.content.imgtext.colSpace}px; } div.csc-textpic-intext-left-nowrap .csc-textpic-text { overflow: hidden; });
# Remove margins in beside text.
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := removeString(		margin-right: {$styles.content.imgtext.textMargin}px;);
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := removeString(		margin-left: {$styles.content.imgtext.textMargin}px;);

# colSpace around image columns
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := replaceString(div.csc-textpic-imagecolumn, td.csc-textpic-imagecolumn .csc-textpic-image { margin-right: {$styles.content.imgtext.colSpace}px; }|div.csc-textpic-imagecolumn, td.csc-textpic-imagecolumn .csc-textpic-image { padding-right: {$styles.content.imgtext.colSpace}px; padding-left: {$styles.content.imgtext.colSpace}px; });
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE := appendString(div.csc-textpic div.csc-textpic-imagerow { margin-right: -{$styles.content.imgtext.colSpace}px; margin-left: -{$styles.content.imgtext.colSpace}px; });
